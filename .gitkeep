import React, { useRef } from 'react';
import { FaPaperPlane } from "react-icons/fa";

interface ChatFooterProps {
  input: string;
  setInput: (value: string) => void;
  handleSendMessage: () => void;
  loading: boolean;
  placeholder: string;
  themeConfig: {
    footer: {
      background: string;
      border: string;
    };
    input: {
      background: string;
      text: string;
      border: string;
      placeholder: string;
    };
    button: {
      background: string;
      text: string;
      hover?: string;
    };
  };
  useTextarea?: boolean;
  className?: string;
  style?: React.CSSProperties;
  inputStyle?: React.CSSProperties;
  buttonStyle?: React.CSSProperties;
  customSendButton?: React.ReactNode;
  showSendButton?: boolean;
  autofocus?: boolean;
}

const ChatFooter: React.FC<ChatFooterProps> = ({
  input,
  setInput,
  handleSendMessage,
  loading,
  placeholder,
  themeConfig,
  useTextarea = false,
  className = '',
  style,
  inputStyle,
  buttonStyle,
  customSendButton,
  showSendButton = true,
  autofocus = true,
}) => {
  const inputRef = useRef<HTMLTextAreaElement | HTMLInputElement>(null);

  const footerStyles = {
    backgroundColor: themeConfig.footer.background,
    borderColor: themeConfig.footer.border,
    ...style
  };

  const inputStyles = {
    backgroundColor: themeConfig.input.background,
    color: themeConfig.input.text,
    borderColor: themeConfig.input.border,
    ...inputStyle
  };

  const buttonStyles = {
    backgroundColor: themeConfig.button.background,
    color: themeConfig.button.text,
    ...buttonStyle
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter') {
      if (useTextarea && !e.shiftKey) {
        e.preventDefault();
        handleSendMessage();
      } else if (!useTextarea) {
        e.preventDefault();
        handleSendMessage();
      }
    }
  };

  const InputComponent = useTextarea ? (
    <textarea
      ref={inputRef as React.RefObject<HTMLTextAreaElement>}
      value={input}
      onChange={(e) => setInput(e.target.value)}
      onKeyPress={handleKeyPress}
      placeholder={loading ? "AI is responding..." : placeholder}
      className="w-full px-4 py-2 resize-none focus:outline-none focus:ring-2 rounded-lg"
      style={inputStyles}
      disabled={loading}
      autoFocus={autofocus}
      rows={3}
    />
  ) : (
    <input
      ref={inputRef as React.RefObject<HTMLInputElement>}
      type="text"
      value={input}
      onChange={(e) => setInput(e.target.value)}
      onKeyPress={handleKeyPress}
      placeholder={loading ? "AI is responding..." : placeholder}
      className="w-full px-4 py-2 focus:outline-none focus:ring-2 rounded-full"
      style={inputStyles}
      disabled={loading}
      autoFocus={autofocus}
    />
  );

  return (
    <div 
      className={`p-4 border-t ${className}`}
      style={footerStyles}
    >
      <div className="flex gap-2">
        <div className="flex-1">
          {InputComponent}
        </div>
        
        {showSendButton && (
          <button
            onClick={handleSendMessage}
            disabled={loading || !input.trim()}
            className="p-2 rounded-full hover:opacity-90 active:scale-95 transition-all disabled:opacity-50 disabled:cursor-not-allowed h-10 w-10 flex items-center justify-center"
            style={buttonStyles}
            aria-label="Send message"
          >
            {customSendButton || (
              <FaPaperPlane className="h-4 w-4" />
            )}
          </button>
        )}
      </div>
    </div>
  );
};

export default ChatFooter; 







